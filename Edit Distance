/**
 *Problem Statement:
 *    - Given two strings `word1` and `word2`, find the **minimum number of operations** 
 *      to convert `word1` to `word2` using:
 *      1️⃣ Insert a character
 *      2️⃣ Delete a character
 *      3️⃣ Replace a character
 *
 *  Approach: **Bottom-Up Dynamic Programming**
 *    - Define `dp[i][j]`: **Minimum edits required** to convert `word1[0...i-1]` to `word2[0...j-1]`
 *    - **Base Cases:**
 *      - `dp[0][j] = j` → Convert empty `word1` to `word2` (Insert `j` characters)
 *      - `dp[i][0] = i` → Convert `word1` to empty `word2` (Delete `i` characters)
 *    - **Recurrence Relation:**
 *      - If `word1[i-1] == word2[j-1]`, then `dp[i][j] = dp[i-1][j-1]`
 *      - Otherwise:
 *        `dp[i][j] = 1 + min(Insert, Delete, Replace)`
 *      - Formula:
 *        `dp[i][j] = min(1 + dp[i][j-1], 1 + dp[i-1][j], 1 + dp[i-1][j-1])`
 *
 *  Complexity:
 *    - **Time:** `O(N * M)`
 *    - **Space:** `O(N * M)`
 */

class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        
        // DP table: dp[i][j] stores minimum operations to convert word1[0...i-1] to word2[0...j-1]
        int dp[][] = new int[n + 1][m + 1];

        // Fill DP table iteratively
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                if(i==0)
                  dp[i][j]=j;
            
                else if(j==0)
                  dp[i][j]=i;

                else{
                   if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                        dp[i][j] = dp[i - 1][j - 1]; // No operation needed
                } else {
                    int insert = 1 + dp[i][j - 1];   // Insert character
                    int delete = 1 + dp[i - 1][j];   // Delete character
                    int replace = 1 + dp[i - 1][j - 1]; // Replace character
                    dp[i][j] = Math.min(insert, Math.min(delete, replace));
                  }
                }
            }
        }

        return dp[n][m]; // Minimum operations to convert word1 to word2
    }
}
